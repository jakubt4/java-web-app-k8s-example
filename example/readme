Prerequisites:
Linux (min 4GB RAM, 4 Cores (threads)) - can be VM in VMWare - VBox doesn't support virtualization!

In Linux:
- virtualbox
- docker
- vagrant
---------------------------------------------------------------------------------------------------------------
MANAGE IMAGES & CONTAINERS

Build the docker image from app with Dockerfile (instead of 'javawebapp' image name feel free to use your own image name :) ):
sudo docker build -t javawebapp <path-to-dockerfile>

Check created image:
sudo docker images

Run created image with exposing port (the first port is exposed port of container which is mapped to the second port - port of your app) :
sudo docker run -p 8080:8080 javawebapp

In another terminal window try to get address with curl (or in your web broser):
curl http://localhost:8080/myapp/example/hello

You can stop the running container with Java WEB app  with Ctrl+c.

Show all containers:
sudo docker ps -a

For removing container:
sudo docker container rm <container-IDs>

For removing images:
sudo docker rmi <image-IDs>
----------------------------------------------------------------------------------------------------------------
PUSH IMAGE TO DOCKERHUB (you need account there - its free ;) )

Log into your dockerhub account (it will ask for password):
sudo docker login --username=<account-id>

Create tag for your image:
sudo docker tag javawebapp <your-account-id>/javawebapp:v1

In example, I'm using my own dockerhub repo - jayty - so -> jayty/javawebapp:v1

Then just push your tagged image (wihtout version):
sudo docker push <account-id>/javawebapp

Now, you can check your dockerhub repo.
----------------------------------------------------------------------------------------------------------------
RUN KUBERNETES IN YOUR LOCAL CLUSTER FROM 3 VMs

Feel free to adapt the Vagrantfile for yourself.

Go into the 'cluster' folder:
cd cluster/

With vagrant, check if there already exists any running VM (you must be in cluster/ folder of the project):
vagrant status

If exists, remove by:
vagrant destroy

Run your vagrant for init cluster with 3 VMs and Kubernetes:
vagrant up

And just wait..
and wait..
and wait..
:)
----------------------------------------------------------------------------------------------------------------
DEPLOY YOUR APP INTO THE CLUSTER (later, you can also deploy your own app directly through the vagrant playbook)

Go into the 'cluster' folder:
cd cluster/

Ssh to the k8s master node:
vagrant ssh k8s-master

Now, you are in the master node of the K8s cluster. Check your nodes:
kubectl get nodes

You have two options:
a)
Create yaml file for deploying your app (I'm mainly using nano:) ):
nano javawebapp.yaml

and apply/push your deployment file:
kubectl apply -f javawebapp.yaml

b)
Use the following one yaml file with my own image for Java WEB App:
kubectl apply -f https://raw.githubusercontent.com/jakubt4/java-web-app-k8s-example/master/example/javawebapp.yaml

Check your created pods based on your deployment:
kubectl get pods

Now you need to create service for your deployment. Again, you have two options here:
a)
Create yaml file for service for your deplying (I'm mainly using nano:) ):
nano javawebapp-service.yaml

and apply/push your deployment file:
kubectl apply -f javawebapp-service.yaml

b)
Use the following one yaml file with my own service for Java WEB App deployment (must be used with preprepared deployment config).
This service will expose the port for the app mapped to the port of your deplyment app on the public IP -> its define in Vagrantfile for each VM (192.168.50.10, 192.168.50.11, 192.168.50.12).
kubectl apply -f https://raw.githubusercontent.com/jakubt4/java-web-app-k8s-example/master/example/javawebapp-service.yaml

Check your created service based on your deployment:
kubectl get svc

If you used the preprepared deployment just curl from the host (each respons is 'Hello world'):
curl http://192.168.50.12:30080/myapp/example/hello

or

curl http://192.168.50.11:30080/myapp/example/hello

or

curl http://192.168.50.10:30080/myapp/example/hello
